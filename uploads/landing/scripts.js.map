{"version":3,"file":"uploads/landing/scripts.js","mappings":"mBA2CA,SAASA,EAAkBC,EAAmBC,GAC5C,IAzCMC,EACAC,EACEC,EAwCR,KA1CMF,EAyCgCF,EAzCtBK,wBACVF,EAAUG,OAAOC,aAAeC,SAASC,gBAAgBC,aACvDN,EAAgBF,EAAI,IAAJA,EAAI,QAEX,GAAKE,GAAOD,GAuC3B,OAAOQ,QAAQC,SAAQ,GAGzB,GADiBZ,EAAKa,aAAa,oBAEjC,OAAOF,QAAQC,SAAQ,GAMjB,IA9CSE,EA8CTC,EAAYf,EAAI,QAChBgB,EAA4BD,EAAO,SAAzBE,EAAkBF,EAAO,cAS3Cf,EAAKkB,aAAa,oBAAqB,SAxDtBJ,EAyDPG,EAxDH,IAAIN,SAAQ,SAACC,EAASO,GAC3B,IAAMC,EAAUZ,SAASa,cAAc,OACvCD,EAAQF,aAAa,MAAOJ,GAC5BM,EAAQE,iBAAiB,QAAQ,SAACC,GAMhCX,EAAQQ,EACV,IACAA,EAAQE,iBAAiB,SAAS,SAACE,GACzB,IAAAC,EAAWD,EAAK,OAEhBE,EAAkBD,EAAM,KAAlBE,EAAYF,EAAM,QAC1BG,EAAQ,IAAIC,MAAM,sCAA+Bf,EAAG,MAE1DgB,QAAQF,MAAM,yBAA0B,CACtCA,MAAK,EACLd,IAAG,EACHY,KAAI,EACJC,QAAO,EACPF,OAAM,EACND,MAAK,IAGP,SACAL,EAAOS,EACT,GACF,KA4BGG,MAAK,SAACC,GACL,GAAIhB,EAASiB,WAAW,cAAe,CACrC,IAAMC,EAAkB,eAAQF,EAAIG,IAAG,MACvCnC,EAAKoC,MAAMF,gBAAkBA,CAC/B,KAAO,CACL,GAAIlC,EAAKa,aAAa,SAAWmB,EAAIG,IACnC,OAAO,EAETnC,EAAKkB,aAAa,MAAOD,EAC3B,CAOA,OALAoB,YAAW,WACTrC,EAAKkB,aAAa,mBAAoB,QACtClB,EAAKsC,gBAAgB,oBACvB,GAAG,KACHrC,EAASsC,UAAUvC,IACZ,CACT,IACCwC,OAAM,WAAO,GAClB,CAEA,IAAMvC,EAAW,IAAIwC,sBAAqB,SAACC,EAASzC,GAClDyC,EAAQC,SAAQ,SAAC,GACf5C,EADuB,SACkBE,EAC3C,GACF,ICvEyC6B,QAAQc,KACnCC,KAAKf,QALA,sEAenBxB,OAAOgB,iBAAiB,QARxB,WCrBO,IACCwB,EACAC,EACAC,EACAC,EACAC,EACAC,EFsFQ3C,SAAS4C,iBAAiB,cAClCT,SAAQ,SAAC3C,GACbC,EAASoD,QAAQrD,EACnB,IE9FM8C,EAActC,SAAS8C,cAAc,YACrCP,EAAWvC,SAAS8C,cAAc,SAClCN,EAAoBD,EAASO,cAAc,cAC3CL,EAAcF,EAASO,cAAc,QACrCJ,EAAkBH,EAASO,cAAc,mBACzCH,EAAWD,EAAgBI,cAAc,SAW3CR,GACFA,EAAYS,SAEVJ,GACFA,EAASI,SAGXR,EAASS,UAAUC,IAAI,YACvBT,EAAkBQ,UAAUC,IAAI,iBAEhCR,EAAYO,UAAUC,IAAI,WAG1BP,EAAgBM,UAAUD,OAAO,YACjCL,EAAgBM,UAAUD,OAAO,YAEjCL,EAAgBM,UAAUC,IAAI,kBDNhC,G","sources":["webpack://fsproperty-landing-compile/./src/LazyImages/LazyImages.ts","webpack://fsproperty-landing-compile/./src/root.ts","webpack://fsproperty-landing-compile/./src/RootNode/RootNode.ts"],"sourcesContent":["import './LazyImages.styles.scss';\n\nfunction isElementInViewport(el: HTMLElement) {\n  const rect = el.getBoundingClientRect();\n  const wHeight = window.innerHeight || document.documentElement.clientHeight;\n  const { top, bottom } = rect;\n  // NOTE: Checking only vertical position\n  return bottom >= 0 && top <= wHeight;\n}\n\nfunction loadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const imgNode = document.createElement('img');\n    imgNode.setAttribute('src', url);\n    imgNode.addEventListener('load', (_event) => {\n      /* console.log('[LazyImages:loadImage] success', {\n       *   url,\n       *   _event,\n       * });\n       */\n      resolve(imgNode);\n    });\n    imgNode.addEventListener('error', (event) => {\n      const { target } = event;\n      // @ts-ignore: To add correct typings?\n      const { href, baseURI } = target;\n      const error = new Error(`Cannot load image with url '${url}'`);\n      // eslint-disable-next-line no-console\n      console.error('[LazyImages:loadImage]', {\n        error,\n        url,\n        href,\n        baseURI,\n        target,\n        event,\n      });\n      // eslint-disable-next-line no-debugger\n      debugger;\n      reject(error);\n    });\n  });\n}\n\nfunction initLazyImageNode(node: HTMLElement, observer: IntersectionObserver) {\n  const isVisible = isElementInViewport(node);\n  if (!isVisible) {\n    return Promise.resolve(false);\n  }\n  const isLoaded = node.getAttribute('data-lazy-loaded');\n  if (isLoaded) {\n    return Promise.resolve(true);\n  }\n  /* NOTE: An alternative way to fetch data attributes\n   * const dataLazyImage = node.getAttribute('data-lazy-image');\n   * const dataOriginalImage = node.getAttribute('dataOriginalImage');\n   */\n  const { dataset } = node;\n  const { lazyMode, originalImage } = dataset;\n  /* console.log('[LazyImages:initLazyImageNode]', {\n   *   isVisible,\n   *   lazyMode,\n   *   originalImage,\n   *   node,\n   * });\n   */\n  // TODO: Load images asynchronously into another (temp) node, control success or error, and update target only on success\n  node.setAttribute('data-lazy-loading', 'true');\n  loadImage(originalImage)\n    .then((img) => {\n      if (lazyMode.startsWith('background')) {\n        const backgroundImage = `url('${img.src}')`;\n        node.style.backgroundImage = backgroundImage;\n      } else {\n        if (node.getAttribute('src') === img.src) {\n          return false;\n        }\n        node.setAttribute('src', originalImage);\n      }\n      // Finish\n      setTimeout(() => {\n        node.setAttribute('data-lazy-loaded', 'true');\n        node.removeAttribute('data-lazy-loading');\n      }, 350);\n      observer.unobserve(node);\n      return true;\n    })\n    .catch(() => {});\n}\n\nconst observer = new IntersectionObserver((entries, observer) => {\n  entries.forEach(({ target }) => {\n    initLazyImageNode(target as HTMLElement, observer);\n  });\n});\n\nexport function initLazyImages() {\n  const nodes = document.querySelectorAll('.LazyImage');\n  nodes.forEach((node: HTMLDivElement) => {\n    observer.observe(node);\n  });\n}\n","/** @module Scripts root module\n *  @since 2024.10.10, 15:26\n *  @changed 2024.10.10, 21:51\n */\n\n// NOTE: Templates are including only for dev-mode update\nimport './include-template.html';\n\nimport './app-info.scss';\nimport './variables/variables-expose.scss';\n\nimport './misc-styles';\n\nimport { initRootNode } from './RootNode';\nimport { initHero } from './Hero';\nimport { initLazyImages } from './LazyImages';\n\n// Print app info...\nconst appVersion = process.env.APP_VERSION;\nconst isDebug = process.env.DEBUG;\nconst isDev = process.env.DEV;\n// eslint-disable-next-line no-console\nconst consoleMethod = isDebug || isDev ? console.warn : console.log;\nconsoleMethod.call(console, appVersion);\n\nfunction initPage() {\n  // console.log('[root:initPage]');\n  // Start subcomponents...\n  initLazyImages();\n  initRootNode();\n  initHero();\n}\n\nwindow.addEventListener('load', initPage);\n","// import { blockRootNode } from '../variables';\n\n// import './RootNode.styles.scss';\n\nexport function initRootNode() {\n  const sidebarNode = document.querySelector('.sidebar');\n  const mainNode = document.querySelector('.main');\n  const mainContainerNode = mainNode.querySelector('.container');\n  const mainRowNode = mainNode.querySelector('.row');\n  const mainContentNode = mainNode.querySelector('.row > .content');\n  const pathNode = mainContentNode.querySelector('.path');\n  /* console.log('[RootNode:initRootNode]', {\n   *   mainNode,\n   *   mainContainerNode,\n   *   mainRowNode,\n   *   mainContentNode,\n   *   pathNode,\n   *   sidebarNode,\n   * });\n   */\n  // Remove unused nodes...\n  if (sidebarNode) {\n    sidebarNode.remove();\n  }\n  if (pathNode) {\n    pathNode.remove();\n  }\n  // Parent nodes...\n  mainNode.classList.add('HeroMain');\n  mainContainerNode.classList.add('HeroContainer');\n  // mainContainerNode.classList.remove('container');\n  mainRowNode.classList.add('HeroRow');\n  // mainRowNode.classList.remove('row');\n  // Content node...\n  mainContentNode.classList.remove('col-sm-8');\n  mainContentNode.classList.remove('col-md-9');\n  // mainContentNode.classList.add('col-12'); // ???\n  mainContentNode.classList.add('HeroVisualBlock');\n  // mainContentNode.classList.remove('content');\n}\n"],"names":["initLazyImageNode","node","observer","rect","wHeight","top","getBoundingClientRect","window","innerHeight","document","documentElement","clientHeight","Promise","resolve","getAttribute","url","dataset","lazyMode","originalImage","setAttribute","reject","imgNode","createElement","addEventListener","_event","event","target","href","baseURI","error","Error","console","then","img","startsWith","backgroundImage","src","style","setTimeout","removeAttribute","unobserve","catch","IntersectionObserver","entries","forEach","warn","call","sidebarNode","mainNode","mainContainerNode","mainRowNode","mainContentNode","pathNode","querySelectorAll","observe","querySelector","remove","classList","add"],"sourceRoot":""}